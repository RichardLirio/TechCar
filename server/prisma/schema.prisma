// Configuração do datasource (conexão com PostgreSQL)
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Gerador para o Prisma Client
generator client {
  provider = "prisma-client-js"
}

// Modelo Veiculo
model Veiculo {
  id             Int            @id @default(autoincrement())
  clienteId      Int
  placa          String         @unique @db.VarChar(10)
  modelo         String         @db.VarChar(50)
  marca          String         @db.VarChar(50)
  ano            Int?
  cliente        Cliente        @relation(fields: [clienteId], references: [id])
  ordens_servico OrdemServico[]

  @@map("veiculos")
}

// Modelo OrdemServico
model OrdemServico {
  id         Int                @id @default(autoincrement())
  clienteId  Int
  veiculoId  Int
  km         Int
  status     StatusOrdemServico @default(ABERTA)
  desconto   Float              @default(0.00)
  valorTotal Float              @default(0.00)
  createdAt  DateTime           @default(now())
  updatedAt  DateTime?          @updatedAt
  cliente    Cliente            @relation(fields: [clienteId], references: [id])
  veiculo    Veiculo            @relation(fields: [veiculoId], references: [id])

  pecasUsadas OrdemItem[] // Relação com produtos usadas
  servicos    OrdemItemServico[]

  @@map("ordens_servico")
}

// Modelo Servico
model Servico {
  id            Int                @id @default(autoincrement())
  descricao     String
  valorServico  Float
  itens_servico OrdemItemServico[]

  @@map("servicos")
}

// Modelo OrdemEstoque
model OrdemItemServico {
  id         Int          @id @default(autoincrement())
  ordemId    Int
  servicoId  Int
  quantidade Int
  valor      Float
  ordem      OrdemServico @relation(fields: [ordemId], references: [id])
  servicos   Servico      @relation(fields: [servicoId], references: [id])

  @@map("ordens_items_servicos")
}

// Modelo Produto (Pecas)
model Produto {
  id            Int         @id @default(autoincrement())
  nome          String      @db.VarChar(100)
  quantidade    Int
  valorUnitario Float
  ordens_itens  OrdemItem[] // Relação com ordens que usaram essa peça

  @@map("produtos")
}

// Modelo OrdemEstoque
model OrdemItem {
  id                Int          @id @default(autoincrement())
  ordemId           Int
  produtoId         Int
  quantidadeUsada   Int
  valorUnitarioPeca Float
  ordem             OrdemServico @relation(fields: [ordemId], references: [id])
  produtos          Produto      @relation(fields: [produtoId], references: [id])

  @@map("ordens_items")
}

// Modelo Cliente
model Cliente {
  id             Int            @id @default(autoincrement())
  nome           String         @db.VarChar(100)
  cpfCnpj        String         @unique @db.VarChar(14)
  tipo           TipoCliente    @default(FISICA)
  telefone       String?        @db.VarChar(15)
  veiculos       Veiculo[]
  ordens_servico OrdemServico[]

  @@map("clientes")
}

// Modelo Usuario
model Usuario {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password_hash String   @db.VarChar(255)
  role          Role     @default(USER)
  createdAt     DateTime @default(now())

  @@map("usuarios")
}

// Enum para o campo role de Usuario
enum Role {
  ADMIN
  USER
}

enum StatusOrdemServico {
  ABERTA
  FECHADA
}

enum TipoCliente {
  JURIDICA
  FISICA
}
